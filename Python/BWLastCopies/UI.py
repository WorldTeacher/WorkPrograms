# Form implementation generated from reading ui file '.\UniversalUI.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import urlsearch,os, json as json
import atexit
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1280, 720))
        MainWindow.setMaximumSize(QtCore.QSize(1280, 720))
        MainWindow.setMouseTracking(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(1280, 720))
        self.tabWidget.setMaximumSize(QtCore.QSize(1280, 720))
        self.tabWidget.setWhatsThis("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_reihe_a = QtWidgets.QWidget()
        self.tab_reihe_a.setObjectName("tab_reihe_a")
        self.pushButton = QtWidgets.QPushButton(self.tab_reihe_a)
        self.pushButton.setGeometry(QtCore.QRect(1180, 620, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.progressBar = QtWidgets.QProgressBar(self.tab_reihe_a)
        self.progressBar.setGeometry(QtCore.QRect(10, 620, 1141, 23))
        self.progressBar.setToolTip("")
        self.progressBar.setToolTipDuration(2)
        self.progressBar.setWhatsThis("")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressBar.setObjectName("progressBar")
        self.name = QtWidgets.QCheckBox(self.tab_reihe_a)
        self.name.setGeometry(QtCore.QRect(10, 590, 70, 17))
        self.name.setObjectName("name")
        self.testloginfo = QtWidgets.QPlainTextEdit(self.tab_reihe_a)
        self.testloginfo.setEnabled(True)
        self.testloginfo.setGeometry(QtCore.QRect(30, 510, 891, 71))
        self.testloginfo.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.testloginfo.setAcceptDrops(True)
        self.testloginfo.setObjectName("testloginfo")
        self.loglabel = QtWidgets.QLabel(self.tab_reihe_a)
        self.loglabel.setGeometry(QtCore.QRect(30, 490, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.loglabel.setFont(font)
        self.loglabel.setObjectName("loglabel")
        self.tabWidget.addTab(self.tab_reihe_a, "")
        self.tab_bwl = QtWidgets.QWidget()
        self.tab_bwl.setObjectName("tab_bwl")
        self.label_2 = QtWidgets.QLabel(self.tab_bwl)
        self.label_2.setGeometry(QtCore.QRect(20, 60, 47, 13))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.tabwidget_auto_manual = QtWidgets.QTabWidget(self.tab_bwl)
        self.tabwidget_auto_manual.setGeometry(QtCore.QRect(0, 0, 1271, 671))
        self.tabwidget_auto_manual.setObjectName("tabwidget_auto_manual")
        self.Automatic = QtWidgets.QWidget()
        self.Automatic.setObjectName("Automatic")
        self.do_run_bwlastcopies = QtWidgets.QPushButton(self.Automatic)
        self.do_run_bwlastcopies.setGeometry(QtCore.QRect(1180, 610, 75, 23))
        self.do_run_bwlastcopies.setObjectName("do_run_bwlastcopies")
        self.progressbar_lastcopies = QtWidgets.QProgressBar(self.Automatic)
        self.progressbar_lastcopies.setGeometry(QtCore.QRect(10, 610, 1141, 23))
        self.progressbar_lastcopies.setToolTip("")
        self.progressbar_lastcopies.setToolTipDuration(2)
        self.progressbar_lastcopies.setWhatsThis("")
        self.progressbar_lastcopies.setProperty("value", 0)
        self.progressbar_lastcopies.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressbar_lastcopies.setObjectName("progressbar_lastcopies")
        self.loginfo_bwl = QtWidgets.QPlainTextEdit(self.Automatic)
        self.loginfo_bwl.setEnabled(True)
        self.loginfo_bwl.setGeometry(QtCore.QRect(30, 500, 891, 71))
        self.loginfo_bwl.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.loginfo_bwl.setAcceptDrops(True)
        self.loginfo_bwl.setObjectName("loginfo_bwl")
        self.xml_path = QtWidgets.QLineEdit(self.Automatic)
        self.xml_path.setEnabled(False)
        self.xml_path.setGeometry(QtCore.QRect(80, 30, 113, 19))
        self.xml_path.setObjectName("xml_path")
        self.save_json = QtWidgets.QPushButton(self.Automatic)
        self.save_json.setGeometry(QtCore.QRect(440, 10, 75, 23))
        self.save_json.setObjectName("save_json")
        self.show_url = QtWidgets.QCheckBox(self.Automatic)
        self.show_url.setGeometry(QtCore.QRect(120, 240, 70, 17))
        self.show_url.setObjectName("show_url")
        self.loglabel_bwlastcopies = QtWidgets.QLabel(self.Automatic)
        self.loglabel_bwlastcopies.setGeometry(QtCore.QRect(30, 480, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.loglabel_bwlastcopies.setFont(font)
        self.loglabel_bwlastcopies.setObjectName("loglabel_bwlastcopies")
        self.label = QtWidgets.QLabel(self.Automatic)
        self.label.setGeometry(QtCore.QRect(20, 20, 71, 40))
        self.label.setObjectName("label")
        self.log_url = QtWidgets.QCheckBox(self.Automatic)
        self.log_url.setGeometry(QtCore.QRect(120, 260, 70, 17))
        self.log_url.setObjectName("log_url")
        self.toolButton = QtWidgets.QToolButton(self.Automatic)
        self.toolButton.setGeometry(QtCore.QRect(190, 30, 25, 21))
        self.toolButton.setObjectName("toolButton")
        self.tabwidget_auto_manual.addTab(self.Automatic, "")
        self.manual = QtWidgets.QWidget()
        self.manual.setObjectName("manual")
        self.check_bwlastcopies_manual = QtWidgets.QPushButton(self.manual)
        self.check_bwlastcopies_manual.setGeometry(QtCore.QRect(460, 240, 81, 23))
        self.check_bwlastcopies_manual.setObjectName("check_bwlastcopies_manual")
        self.result_bwl_manual = QtWidgets.QPlainTextEdit(self.manual)
        self.result_bwl_manual.setEnabled(True)
        self.result_bwl_manual.setGeometry(QtCore.QRect(20, 290, 1171, 261))
        self.result_bwl_manual.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.result_bwl_manual.setAcceptDrops(True)
        self.result_bwl_manual.setObjectName("result_bwl_manual")
        self.label_result = QtWidgets.QLabel(self.manual)
        self.label_result.setGeometry(QtCore.QRect(20, 260, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_result.setFont(font)
        self.label_result.setObjectName("label_result")
        self.description_manual = QtWidgets.QLabel(self.manual)
        self.description_manual.setGeometry(QtCore.QRect(20, 10, 1191, 101))
        self.description_manual.setTextFormat(QtCore.Qt.TextFormat.RichText)
        self.description_manual.setScaledContents(False)
        self.description_manual.setWordWrap(True)
        self.description_manual.setObjectName("description_manual")
        self.label_author = QtWidgets.QLabel(self.manual)
        self.label_author.setGeometry(QtCore.QRect(20, 110, 41, 21))
        self.label_author.setStatusTip("")
        self.label_author.setWhatsThis("")
        self.label_author.setAccessibleName("")
        self.label_author.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_author.setAutoFillBackground(False)
        self.label_author.setIndent(-1)
        self.label_author.setObjectName("label_author")
        self.author_input = QtWidgets.QTextEdit(self.manual)
        self.author_input.setGeometry(QtCore.QRect(60, 110, 211, 21))
        self.author_input.setMouseTracking(True)
        self.author_input.setToolTip("")
        self.author_input.setToolTipDuration(10)
        self.author_input.setStatusTip("")
        self.author_input.setWhatsThis("")
        self.author_input.setAccessibleName("")
        self.author_input.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.author_input.setObjectName("author_input")
        self.title_input = QtWidgets.QTextEdit(self.manual)
        self.title_input.setGeometry(QtCore.QRect(330, 110, 211, 21))
        self.title_input.setMouseTracking(True)
        self.title_input.setToolTip("")
        self.title_input.setStatusTip("")
        self.title_input.setWhatsThis("")
        self.title_input.setAccessibleName("")
        self.title_input.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.title_input.setObjectName("title_input")
        self.label_title = QtWidgets.QLabel(self.manual)
        self.label_title.setGeometry(QtCore.QRect(300, 110, 41, 21))
        self.label_title.setStatusTip("")
        self.label_title.setWhatsThis("")
        self.label_title.setAccessibleName("")
        self.label_title.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_title.setAutoFillBackground(False)
        self.label_title.setIndent(-1)
        self.label_title.setObjectName("label_title")
        self.graphicsView = QtWidgets.QGraphicsView(self.manual)
        self.graphicsView.setGeometry(QtCore.QRect(590, 90, 191, 191))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graphicsView.sizePolicy().hasHeightForWidth())
        self.graphicsView.setSizePolicy(sizePolicy)
        self.graphicsView.setInteractive(False)
        self.graphicsView.setObjectName("graphicsView")
        self.bibid = QtWidgets.QLabel(self.manual)
        self.bibid.setGeometry(QtCore.QRect(20, 150, 81, 16))
        self.bibid.setObjectName("bibid")
        self.bib_id_input = QtWidgets.QLineEdit(self.manual)
        self.bib_id_input.setGeometry(QtCore.QRect(100, 150, 41, 20))
        self.bib_id_input.setObjectName("bib_id_input")
        self.label_sigil = QtWidgets.QLabel(self.manual)
        self.label_sigil.setGeometry(QtCore.QRect(160, 150, 31, 21))
        self.label_sigil.setStatusTip("")
        self.label_sigil.setWhatsThis("")
        self.label_sigil.setAccessibleName("")
        self.label_sigil.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_sigil.setAutoFillBackground(False)
        self.label_sigil.setIndent(-1)
        self.label_sigil.setObjectName("label_sigil")
        self.sigi_input = QtWidgets.QLineEdit(self.manual)
        self.sigi_input.setGeometry(QtCore.QRect(190, 150, 81, 20))
        self.sigi_input.setObjectName("sigi_input")
        self.tabwidget_auto_manual.addTab(self.manual, "")
        self.tabWidget.addTab(self.tab_bwl, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionReihe_A = QtGui.QAction(MainWindow)
        self.actionReihe_A.setObjectName("actionReihe_A")
        self.actionBW_LastCopies = QtGui.QAction(MainWindow)
        self.actionBW_LastCopies.setObjectName("actionBW_LastCopies")
        self.get_data_from_settings()
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        self.tabwidget_auto_manual.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "ClickMe"))
        self.name.setText(_translate("MainWindow", "name"))
        self.loglabel.setText(_translate("MainWindow", "Logs:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_reihe_a), _translate("MainWindow", "Reihe A"))
        self.do_run_bwlastcopies.setText(_translate("MainWindow", "ClickMe"))
        self.save_json.setText(_translate("MainWindow", "save config"))
        self.show_url.setText(_translate("MainWindow", "show url"))
        self.loglabel_bwlastcopies.setText(_translate("MainWindow", "Logs:"))
        self.label.setText(_translate("MainWindow", "Import XML:"))
        self.log_url.setText(_translate("MainWindow", "log url"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.tabwidget_auto_manual.setTabText(self.tabwidget_auto_manual.indexOf(self.Automatic), _translate("MainWindow", "Automatisch"))
        self.check_bwlastcopies_manual.setText(_translate("MainWindow", "Prüfen"))
        self.label_result.setText(_translate("MainWindow", "Ergebnis:"))
        self.description_manual.setText(_translate("MainWindow", "<html><head/><body><p>Dieser Tab dient dazu, selbst kleine suchen durchzuführen. Um ein Medium auf BW-LastCopies-Status zu prüfen, wird mindestens der Titel benötigt; der Autor kann ergänzt werden. Nachdem der Titel und ggf. Autor in die unte stehenden Felder eingegeben wurde, auf &quot;Prüfen&quot; klicken und das Ergebnis aus dem unten stehenden Feld ablesen.</p><p><br/>Der Autor muss in diesem Format eingegeben werden: Nachname, Vorname</p></body></html>"))
        self.label_author.setText(_translate("MainWindow", "Autor:"))
        self.label_title.setText(_translate("MainWindow", "Titel:"))
        self.bibid.setText(_translate("MainWindow", "Bibliotheks-ID:"))
        self.label_sigil.setText(_translate("MainWindow", "Sigel:"))
        self.tabwidget_auto_manual.setTabText(self.tabwidget_auto_manual.indexOf(self.manual), _translate("MainWindow", "Manuel"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_bwl), _translate("MainWindow", "BW LastCopies"))
        self.actionReihe_A.setText(_translate("MainWindow", "Reihe A"))
        self.actionBW_LastCopies.setText(_translate("MainWindow", "BW LastCopies"))
        self.set_tooltips()
        #connect get_input to check_bwlastcopies_manual
        self.check_bwlastcopies_manual.clicked.connect(self.is_pressed)
    def set_tooltips(self):
        self.check_bwlastcopies_manual.setToolTip("Prüft den Titel auf BW-LastCopies-Status")
        self.check_bwlastcopies_manual.setToolTipDuration(2500)
        self.bibid.setToolTip("Bibliotheks-ID, kann mithilfe von winIBW gefunden werden")
        self.label_sigil.setToolTip("Sigel, welches u.a für die Fernleihe verwendet wird")
    def is_pressed(self):
        #check if button self.do_run_bwlastcopies_manual is pressed
            author,title=self.get_input()
            result = urlsearch.manualsearch(author,title)
            title=result['title']
            our_issues=result['our_issues']
            our_signature=result['signature']
            our_count=result['our_count']
            all_issues=result['all_issues']
            all_count=result['all_count']
            ppn=result['ppn']
            notification_1=f'Die Suche nach Titel: {title}, Autor: {author} ergab folgendes Ergebnis:'
            notification_manual=f'Lokal: Anzahl: {our_count}, Auflage(n): {our_issues}, Signatur: {our_signature}, PPN: {ppn}'
            notification_3=f'Gesamt: Anzahl: {all_count}, Auflage(n): {all_issues}'
            #print(f'{notification_1}\n{notification_manual}\n{notification_3}')
            self.result_bwl_manual.setPlainText(f'{notification_1}\n{notification_manual}\n{notification_3}')
            #display result in loginfo_bwl_manual
            
    def get_input(self):
        author=self.author_input.toPlainText()
        title=self.title_input.toPlainText()
        #print(f'author: {author}, title: {title}')
        return author,title  
    def get_data_from_settings(self):
        #get data from settings.json
        #search gui-settings.json in same directory as this file
        #if not found, use default settings
        try:
            if os.path.isfile('gui-settings.json'):
                with open('gui-settings.json') as f:
                    data = json.load(f)
                self.bib_id_input.setText(data['Bibliotheks-ID'])
                self.sigi_input.setText(data['Sigel'])
                #self.bib_id_input.setPlainText(data['bibid'])
                #self.sigi_input.setPlainText(data['sigel'])
        except FileNotFoundError:
            print('gui-settings.json does not exist, loading from settings.json')
            with open('gui-settings.json') as f:
                data = json.load(f)
            self.bib_id_input.setText(data['Bibliotheks-ID'])
            self.sigi_input.setText(data['Sigel'])
    def save_data_to_settings(self):
        #save data to settings.json
        bibid=self.bib_id_input.text()
        sigel=self.sigi_input.text()
        data = {
            'Bibliotheks-ID': bibid,
            'Sigel': sigel
            }
        with open('gui-settings.json', 'w') as f:
            json.dump(data, f,sort_keys=True, indent=4)
            print(data)
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    atexit.register(ui.save_data_to_settings)
    sys.exit(app.exec())
    
