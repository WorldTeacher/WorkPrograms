import urlsearch,os, json as json, manualsearch
import atexit
self.get_data_from_settings()

        self.check_bwlastcopies_manual.clicked.connect(self.is_pressed)

    def is_pressed(self):
        #check if button self.do_run_bwlastcopies_manual is pressed
        
        author,title,issue=self.get_input()
        #result = urlsearch.manualsearch(author,title,pass_issue="3")
        result=manualsearch.search(author,title,issue)
        title=result['title']
        our_issues=result['our_issues']
        our_signature=result['signature']
        our_count=result['our_count']
        all_issues=result['issue_count']

        all_count=result['all_count']
        ppn=result['ppn']
        series=result['series']
        notification_1=f'Die Suche nach Titel:  {title}, Autor: {author} ergab folgendes Ergebnis:'
        notification_manual=f'Lokal: Auflage(n): {our_issues}, Signatur(en): {our_signature}, PPN: {ppn}, Serie: {series}'
        notification_3=f'Gesamt: Anzahl: {all_count}, Auflage(n):\n{all_issues}'
        #print(f'{notification_1}\n{notification_manual}\n{notification_3}')
        self.result_bwl_manual.setPlainText(f' {notification_1}\n\n{notification_manual}\n\n{notification_3}')
        self.result_bwl_manual.
        #display result in loginfo_bwl_manual
            
    def get_input(self):
        author=self.author_input.text()
        title=self.title_input.text()
        issue=self.pass_issue_input.text()
        #print(f'author: {author}, title: {title}')
        return author,title,issue  
    def get_data_from_settings(self):
        #try to load settings from gui_settings.json, if it is not available, load from settings.json and create gui_settings.json on exit
        try:
            if os.path.isfile('gui-settings.json'):
                with open('gui-settings.json') as f:
                    data = json.load(f)
                self.bib_id_input.setText(data['Bibliotheks-ID'])
                self.sigi_input.setText(data['Sigel'])
                self.ReiheA_BWL.setCurrentIndex(data['Index_ReiheA_BWL'])
                self.tabwidget_auto_manual.setCurrentIndex(data['Index_Automatic_Manual'])
                #self.bib_id_input.setPlainText(data['bibid'])
                #self.sigi_input.setPlainText(data['sigel'])
        except FileNotFoundError:
            print('gui-settings.json does not exist, loading from settings.json')
            with open('gui-settings.json') as f:
                data = json.load(f)
            self.bib_id_input.setText(data['Bibliotheks-ID'])
            self.sigi_input.setText(data['Sigel'])
    def save_data_to_settings(self):
        #save data to settings.json
        bibid=self.bib_id_input.text()
        sigel=self.sigi_input.text()
        tab_bwl_man_auto=self.tabwidget_auto_manual.currentIndex()
        tab_ra_bwlastcopies=self.ReiheA_BWL.currentIndex()
        data = {
            'Bibliotheks-ID': bibid,
            'Sigel': sigel,
            'Index_Automatic_Manual': tab_bwl_man_auto,
            'Index_ReiheA_BWL':tab_ra_bwlastcopies,
            'tbd':0
            }

        with open('gui-settings.json', 'w') as f:
            json.dump(data, f, indent=4)
            print(data)
    class colors:
        pass

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    atexit.register(ui.save_data_to_settings)
    sys.exit(app.exec())