# Form implementation generated from reading ui file '.\Python\UniversalUI.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1280, 720))
        MainWindow.setMaximumSize(QtCore.QSize(1280, 720))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(1280, 720))
        self.tabWidget.setMaximumSize(QtCore.QSize(1280, 720))
        self.tabWidget.setWhatsThis("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_reihe_a = QtWidgets.QWidget()
        self.tab_reihe_a.setObjectName("tab_reihe_a")
        self.pushButton = QtWidgets.QPushButton(self.tab_reihe_a)
        self.pushButton.setGeometry(QtCore.QRect(1180, 620, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.progressBar = QtWidgets.QProgressBar(self.tab_reihe_a)
        self.progressBar.setGeometry(QtCore.QRect(10, 620, 1141, 23))
        self.progressBar.setToolTip("")
        self.progressBar.setToolTipDuration(2)
        self.progressBar.setWhatsThis("")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressBar.setObjectName("progressBar")
        self.name = QtWidgets.QCheckBox(self.tab_reihe_a)
        self.name.setGeometry(QtCore.QRect(10, 590, 70, 17))
        self.name.setObjectName("name")
        self.testloginfo = QtWidgets.QPlainTextEdit(self.tab_reihe_a)
        self.testloginfo.setEnabled(True)
        self.testloginfo.setGeometry(QtCore.QRect(40, 510, 104, 71))
        self.testloginfo.setObjectName("testloginfo")
        self.tabWidget.addTab(self.tab_reihe_a, "")
        self.tab_bwl = QtWidgets.QWidget()
        self.tab_bwl.setObjectName("tab_bwl")
        self.show_url = QtWidgets.QCheckBox(self.tab_bwl)
        self.show_url.setGeometry(QtCore.QRect(120, 250, 70, 17))
        self.show_url.setObjectName("show_url")
        self.log_url = QtWidgets.QCheckBox(self.tab_bwl)
        self.log_url.setGeometry(QtCore.QRect(120, 270, 70, 17))
        self.log_url.setObjectName("log_url")
        self.save_json = QtWidgets.QPushButton(self.tab_bwl)
        self.save_json.setGeometry(QtCore.QRect(390, 70, 75, 23))
        self.save_json.setObjectName("save_json")
        self.tabWidget.addTab(self.tab_bwl, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        self.menuexit = QtWidgets.QMenu(self.menubar)
        self.menuexit.setWhatsThis("")
        self.menuexit.setObjectName("menuexit")
        self.menuload = QtWidgets.QMenu(self.menubar)
        self.menuload.setObjectName("menuload")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionReihe_A = QtGui.QAction(MainWindow)
        self.actionReihe_A.setObjectName("actionReihe_A")
        self.actionBW_LastCopies = QtGui.QAction(MainWindow)
        self.actionBW_LastCopies.setObjectName("actionBW_LastCopies")
        self.menuload.addAction(self.actionReihe_A)
        self.menuload.addSeparator()
        self.menuload.addAction(self.actionBW_LastCopies)
        self.menubar.addAction(self.menuexit.menuAction())
        self.menubar.addAction(self.menuload.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "ClickMe"))
        self.name.setText(_translate("MainWindow", "name"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_reihe_a), _translate("MainWindow", "Reihe A"))
        self.show_url.setText(_translate("MainWindow", "show url"))
        self.log_url.setText(_translate("MainWindow", "log url"))
        self.save_json.setText(_translate("MainWindow", "save config"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_bwl), _translate("MainWindow", "BW LastCopies"))
        self.menuexit.setTitle(_translate("MainWindow", "exit"))
        self.menuload.setTitle(_translate("MainWindow", "load"))
        self.actionReihe_A.setText(_translate("MainWindow", "Reihe A"))
        self.actionBW_LastCopies.setText(_translate("MainWindow", "BW LastCopies"))
        self.pushButton.clicked.connect(self.progress)
        self.show_url.clicked.connect(self.show_url_func)
        self.log_url.clicked.connect(self.log_url_func)
    
    def show_url_func(self):
        if self.show_url.isChecked():
            self.testloginfo.appendPlainText("show url is checked")

    def log_url_func(self):
        if self.log_url.isChecked():
            self.testloginfo.appendPlainText("log url is checked")
    def exit(self):
        sys.exit()
    #over the course of 100 seconds, increase the progress bar by 1
    def progress(self):
        self.completed = 0
        while self.completed < 100:
            self.completed += 1
            time.sleep(0.01)
            self.testloginfo.appendPlainText(str(self.completed))
            self.progressBar.setValue(self.completed)
    #create a fuction that displays text in self.testloginfo
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
